import asyncio
import sqlite3
from datetime import datetime
from collections import deque
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, FSInputFile
from openpyxl import Workbook
import os
import csv

# ====== –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ======
API_TOKEN = os.environ.get("API_TOKEN")
ADMIN_ID = int(os.environ.get("ADMIN_ID", "0"))
CHANNEL_USERNAME = "anon_ru_chatik"

if not API_TOKEN:
    raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω API_TOKEN! –£–∫–∞–∂–∏ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Render ‚Üí Environment.")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# ====== –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ======
conn = sqlite3.connect("bot.db")
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS feedback (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    partner_id INTEGER,
    feedback TEXT,
    timestamp TEXT
)
""")
cursor.execute("""
CREATE TABLE IF NOT EXISTS blocked_users (
    user_id INTEGER PRIMARY KEY,
    reason TEXT,
    timestamp TEXT
)
""")
conn.commit()

# ====== –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ======
users = {}
waiting = deque()

# ====== FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è ======
class Register(StatesGroup):
    check_subscribe = State()
    gender = State()
    age_confirm = State()
    mode = State()

# ====== –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ======
gender_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ú—É–∂—Å–∫–æ–π")], [KeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π")]],
    resize_keyboard=True
)
age_confirm_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ú–Ω–µ –µ—Å—Ç—å 18 –ª–µ—Ç ‚úÖ")],
              [KeyboardButton(text="–ú–Ω–µ –Ω–µ—Ç 18 –ª–µ—Ç ‚ùå")]],
    resize_keyboard=True
)
mode_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü–æ–∏—Å–∫ —Ä–æ–ª–µ–≤–∏–∫–∞")],
        [KeyboardButton(text="–ü–æ–∏—Å–∫ –≤–∏—Ä—Ç–∞")],
        [KeyboardButton(text="–ü—Ä–æ—Å—Ç–æ –æ–±—â–µ–Ω–∏–µ")],
        [KeyboardButton(text="–í—ã–±–æ—Ä –¥—Ä—É–≥–æ–≥–æ —Ä–µ–∂–∏–º–∞")]
    ],
    resize_keyboard=True
)
feedback_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üëç"), KeyboardButton(text="üëé")],
              [KeyboardButton(text="üö® –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è")]],
    resize_keyboard=True
)
chat_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥")],
              [KeyboardButton(text="üîÑ –ù–æ–≤—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫")]],
    resize_keyboard=True
)

# ====== –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ ======
def is_blocked(user_id: int) -> bool:
    cursor.execute("SELECT 1 FROM blocked_users WHERE user_id=?", (user_id,))
    return cursor.fetchone() is not None

# ====== –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å ======
def add_to_waiting(user_id):
    if user_id not in waiting and not users[user_id].get("partner"):
        waiting.append(user_id)

# ====== –°—Ç–∞—Ä—Ç–æ–≤—ã–π —Ö—ç–Ω–¥–ª–µ—Ä —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ ======
@dp.message(CommandStart())
async def start_cmd(message: types.Message, state: FSMContext):
    uid = message.from_user.id
    if is_blocked(uid):
        await message.answer("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")
        return

    try:
        member = await bot.get_chat_member(f"@{CHANNEL_USERNAME}", uid)
        if member.status == "left":
            await message.answer(f"‚ö† –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @{CHANNEL_USERNAME}, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")
            return
    except:
        await message.answer(f"‚ö† –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @{CHANNEL_USERNAME}, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")
        return

    await message.answer("–ü—Ä–∏–≤–µ—Ç! –£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª:", reply_markup=gender_kb)
    await state.set_state(Register.gender)

# ====== FSM –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ======
@dp.message(Register.gender)
async def process_gender(message: types.Message, state: FSMContext):
    await state.update_data(gender=message.text)
    await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤–∞–º –µ—Å—Ç—å 18 –ª–µ—Ç:", reply_markup=age_confirm_kb)
    await state.set_state(Register.age_confirm)

@dp.message(Register.age_confirm)
async def process_age_confirm(message: types.Message, state: FSMContext):
    if message.text == "–ú–Ω–µ –Ω–µ—Ç 18 –ª–µ—Ç ‚ùå":
        await message.answer("üö´ –ò–∑–≤–∏–Ω–∏—Ç–µ, –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å—Ç–∞—Ä—à–µ 18 –ª–µ—Ç.")
        await state.clear()
        return
    elif message.text != "–ú–Ω–µ –µ—Å—Ç—å 18 –ª–µ—Ç ‚úÖ":
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è:", reply_markup=mode_kb)
    await state.set_state(Register.mode)

@dp.message(Register.mode)
async def process_mode(message: types.Message, state: FSMContext):
    uid = message.from_user.id
    if message.text == "–í—ã–±–æ—Ä –¥—Ä—É–≥–æ–≥–æ —Ä–µ–∂–∏–º–∞":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è:", reply_markup=mode_kb)
        return

    data = await state.get_data()
    users[uid] = {
        "gender": data["gender"],
        "mode": message.text,
        "partner": None
    }

    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –≤ –ø–æ–∏—Å–∫–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –¥–ª—è '{message.text}'. –ñ–¥–∏—Ç–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞‚Ä¶",
        reply_markup=types.ReplyKeyboardRemove()
    )
    add_to_waiting(uid)
    await match_users()
    await state.clear()

# ====== –õ–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ ======
async def match_users():
    i = 0
    while i < len(waiting):
        uid1 = waiting[i]
        user1 = users[uid1]
        if user1.get("partner"):
            i += 1
            continue

        paired = False
        for j in range(i+1, len(waiting)):
            uid2 = waiting[j]
            user2 = users[uid2]
            if user2.get("partner"):
                continue

            if user1["mode"] == user2["mode"]:
                users[uid1]["partner"] = uid2
                users[uid2]["partner"] = uid1

                await bot.send_message(uid1, f"–ù–∞–π–¥–µ–Ω —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫! {user2['gender']}", reply_markup=chat_kb)
                await bot.send_message(uid2, f"–ù–∞–π–¥–µ–Ω —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫! {user1['gender']}", reply_markup=chat_kb)

                waiting.remove(uid1)
                waiting.remove(uid2)
                paired = True
                break
        if not paired:
            i += 1

# ====== –ü–µ—Ä–µ–ø–∏—Å–∫–∞, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –∏ –æ—Ç–∑—ã–≤—ã ======
@dp.message()
async def chat_handler(message: types.Message):
    uid = message.from_user.id
    if uid not in users:
        return

    partner = users[uid].get("partner")

    if message.text in ["‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", "üîÑ –ù–æ–≤—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫"]:
        if partner:
            users[partner]["partner"] = None
            await bot.send_message(partner, "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥. –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤:", reply_markup=feedback_kb)
            add_to_waiting(partner)

        users[uid]["partner"] = None
        await bot.send_message(uid, "–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤:", reply_markup=feedback_kb)
        add_to_waiting(uid)

        if message.text == "üîÑ –ù–æ–≤—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫":
            await message.answer("–ü–æ–∏—Å–∫ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞‚Ä¶", reply_markup=types.ReplyKeyboardRemove())
            await match_users()
        return

    if message.text in ["üëç", "üëé", "üö® –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è"]:
        partner_id = partner if partner else None
        cursor.execute(
            "INSERT INTO feedback (user_id, partner_id, feedback, timestamp) VALUES (?, ?, ?, ?)",
            (uid, partner_id, message.text, datetime.utcnow().isoformat())
        )
        conn.commit()

        if message.text == "üö® –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è" and partner_id:
            cursor.execute(
                "SELECT COUNT(*) FROM feedback WHERE partner_id=? AND feedback='üö® –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è'",
                (partner_id,)
            )
            complaints = cursor.fetchone()[0]
            if complaints >= 3:
                cursor.execute(
                    "INSERT OR REPLACE INTO blocked_users (user_id, reason, timestamp) VALUES (?, ?, ?)",
                    (partner_id, "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∂–∞–ª–æ–±", datetime.utcnow().isoformat())
                )
                conn.commit()
                await bot.send_message(partner_id, "üö´ –í—ã –±—ã–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏–∑-–∑–∞ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∂–∞–ª–æ–±.")
                await bot.send_message(ADMIN_ID, f"‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {partner_id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (–∂–∞–ª–æ–±—ã: {complaints}).")

        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!", reply_markup=types.ReplyKeyboardRemove())
        return

    if partner:
        await bot.send_message(partner, message.text)

# ====== –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã ======
@dp.message(Command("reports"))
async def reports_cmd(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    args = message.text.split()
    filter_type = args[1] if len(args) > 1 else None
    query = "SELECT user_id, partner_id, feedback, timestamp FROM feedback"
    params = []
    if filter_type in ["üëç", "üëé", "üö® –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è"]:
        query += " WHERE feedback=?"
        params.append(filter_type)
    query += " ORDER BY id DESC LIMIT 20"
    cursor.execute(query, params)
    rows = cursor.fetchall()
    if not rows:
        await message.answer("–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –ø–æ –¥–∞–Ω–Ω–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É.")
        return
    text = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –æ—Ç–∑—ã–≤–æ–≤" + (f" ({filter_type})" if filter_type else "") + ":\n\n"
    for u, p, f, t in rows:
        text += f"üë§ {u} ‚Üí {p if p else '-'} | {f} | {t}\n"
    await message.answer(text)

@dp.message(Command("unblock"))
async def unblock_cmd(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    args = message.text.split()
    if len(args) != 2 or not args[1].isdigit():
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unblock user_id")
        return
    uid = int(args[1])
    cursor.execute("DELETE FROM blocked_users WHERE user_id=?", (uid,))
    conn.commit()
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

@dp.message(Command("export"))
async def export_csv(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    cursor.execute("SELECT * FROM feedback")
    rows = cursor.fetchall()
    if not rows:
        await message.answer("–í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤.")
        return
    filename = "feedback_export.csv"
    with open(filename, "w", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow(["id", "user_id", "partner_id", "feedback", "timestamp"])
        writer.writerows(rows)
    await message.answer_document(FSInputFile(filename))

@dp.message(Command("export_xlsx"))
async def export_xlsx(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    cursor.execute("SELECT * FROM feedback")
    rows = cursor.fetchall()
    if not rows:
        await message.answer("–í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤.")
        return
    wb = Workbook()
    ws = wb.active
    ws.append(["id", "user_id", "partner_id", "feedback", "timestamp"])
    for row in rows:
        ws.append(row)
    filename = "feedback_export.xlsx"
    wb.save(filename)
    await message.answer_document(FSInputFile(filename))

# ====== –ó–∞–ø—É—Å–∫ ======
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
