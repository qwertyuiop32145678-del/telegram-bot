# bot.py
import asyncio
import os
from datetime import datetime
from collections import deque
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from databases import Database
from sqlalchemy import Table, Column, Integer, String, MetaData, create_engine, select

# ====== –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ======
API_TOKEN = os.environ.get("API_TOKEN")
ADMIN_ID = os.environ.get("ADMIN_ID")
CHANNEL_USERNAME = os.environ.get("CHANNEL_USERNAME", "anon_ru_chatik")
DATABASE_URL = os.environ.get("DATABASE_URL")

if not API_TOKEN or not ADMIN_ID or not DATABASE_URL:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è API_TOKEN, ADMIN_ID –∏–ª–∏ DATABASE_URL")

try:
    ADMIN_ID = int(ADMIN_ID)
except Exception:
    raise ValueError("ADMIN_ID –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º (Telegram user id)")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# ====== PostgreSQL / —Ç–∞–±–ª–∏—Ü—ã ======
metadata = MetaData()

feedback_table = Table(
    "feedback", metadata,
    Column("id", Integer, primary_key=True),
    Column("user_id", Integer),
    Column("partner_id", Integer),
    Column("feedback", String),
    Column("timestamp", String)
)

blocked_table = Table(
    "blocked_users", metadata,
    Column("user_id", Integer, primary_key=True),
    Column("reason", String),
    Column("timestamp", String)
)

# –°–æ–∑–¥–∞—ë–º (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ) —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ SQLAlchemy engine (—É–¥–æ–±–Ω–æ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ)
engine = create_engine(DATABASE_URL)
metadata.create_all(engine)

# async database
db = Database(DATABASE_URL)

# ====== –û—á–µ—Ä–µ–¥—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –ø–∞–º—è—Ç–∏) ======
users = {}        # user_id -> {"gender":..., "mode":..., "partner": ...}
waiting = deque() # –æ—á–µ—Ä–µ–¥—å user_id

# ====== FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è ======
class Register(StatesGroup):
    gender = State()
    age_confirm = State()
    mode = State()

# ====== –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ======
gender_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton("–ú—É–∂—Å–∫–æ–π")], [KeyboardButton("–ñ–µ–Ω—Å–∫–∏–π")]],
    resize_keyboard=True
)
age_confirm_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton("18+"), KeyboardButton("–ù–µ—Ç")]],
    resize_keyboard=True
)
mode_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("–†–æ–ª–µ–≤–∏–∫"), KeyboardButton("–í–∏—Ä—Ç")],
        [KeyboardButton("–û–±—â–µ–Ω–∏–µ")],
        [KeyboardButton("–í—ã–±–æ—Ä –¥—Ä—É–≥–æ–≥–æ —Ä–µ–∂–∏–º–∞")]
    ],
    resize_keyboard=True
)
feedback_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("üëç"), KeyboardButton("üëé")],
        [KeyboardButton("üö® –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è")]
    ],
    resize_keyboard=True
)
chat_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥")],
        [KeyboardButton("üîÑ –ù–æ–≤—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫")]
    ],
    resize_keyboard=True
)

# ====== –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ======
async def is_subscribed(user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(f"@{CHANNEL_USERNAME}", user_id)
        # aiogram types ChatMember has .is_member or status, keep robust:
        return getattr(member, "is_member", None) or getattr(member, "status", "") not in ("left", "kicked")
    except Exception:
        # –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–æ—Ç –Ω–µ –∞–¥–º–∏–Ω/–∫–∞–Ω–∞–ª –ø—Ä–∏–≤–∞—Ç–Ω—ã–π), —Å—á–∏—Ç–∞–µ–º –Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º
        return False

# ====== –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ) ======
async def is_blocked(user_id: int) -> bool:
    try:
        row = await db.fetch_one(select([blocked_table.c.user_id]).where(blocked_table.c.user_id == user_id))
        return row is not None
    except Exception:
        return False

# ====== –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å (–±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤) ======
def add_to_waiting(user_id: int):
    # guard: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ users
    if user_id not in users:
        return
    if users[user_id].get("partner"):
        return
    if user_id in waiting:
        return
    waiting.append(user_id)

# ====== /start ======
@dp.message(CommandStart())
async def start_cmd(message: types.Message, state: FSMContext):
    # db.connect –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ main –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å–∞, –Ω–µ –∑–¥–µ—Å—å
    uid = message.from_user.id
    if await is_blocked(uid):
        await message.answer("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")
        return

    if not await is_subscribed(uid):
        await message.answer(f"üîî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @{CHANNEL_USERNAME} —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")
        return

    await message.answer("–ü—Ä–∏–≤–µ—Ç! –£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª:", reply_markup=gender_kb)
    await state.set_state(Register.gender)

# ====== FSM –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ======
@dp.message(Register.gender)
async def process_gender(message: types.Message, state: FSMContext):
    await state.update_data(gender=message.text)
    await message.answer("–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –≤–∞–º –µ—Å—Ç—å 18 –ª–µ—Ç?", reply_markup=age_confirm_kb)
    await state.set_state(Register.age_confirm)

@dp.message(Register.age_confirm)
async def process_age_confirm(message: types.Message, state: FSMContext):
    if message.text != "18+":
        await message.answer("–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç–∞—Ä—à–µ 18 –ª–µ—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.")
        await state.clear()
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è:", reply_markup=mode_kb)
    await state.set_state(Register.mode)

@dp.message(Register.mode)
async def process_mode(message: types.Message, state: FSMContext):
    data = await state.get_data()
    uid = message.from_user.id
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ –ø–∞–º—è—Ç–∏ (–¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã)
    users[uid] = {
        "gender": data.get("gender", "–ù–µ —É–∫–∞–∑–∞–Ω"),
        "mode": message.text,
        "partner": None
    }
    add_to_waiting(uid)
    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–∂–∏–º: {message.text}. –ñ–¥–∏—Ç–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞‚Ä¶", reply_markup=types.ReplyKeyboardRemove())
    await match_users()
    await state.clear()

# ====== –õ–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ ======
async def match_users():
    # –ø—Ä–æ—Å—Ç–∞—è O(n^2) –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—ã –≤ –æ—á–µ—Ä–µ–¥–∏ –ø–æ mode
    i = 0
    while i < len(waiting):
        uid1 = waiting[i]
        # –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª ‚Äî –∑–∞—â–∏—Ç–∏–º—Å—è
        if uid1 not in users:
            try:
                waiting.remove(uid1)
            except ValueError:
                pass
            continue

        user1 = users[uid1]
        if user1.get("partner"):
            i += 1
            continue

        paired = False
        for j in range(i + 1, len(waiting)):
            uid2 = waiting[j]
            if uid2 not in users:
                continue
            user2 = users[uid2]
            if user2.get("partner"):
                continue

            # –∫—Ä–∏—Ç–µ—Ä–∏–π —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è: —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Ä–µ–∂–∏–º
            if user1["mode"] == user2["mode"]:
                users[uid1]["partner"] = uid2
                users[uid2]["partner"] = uid1

                # —É–≤–µ–¥–æ–º–ª—è–µ–º –æ–±–æ–∏—Ö
                try:
                    await bot.send_message(uid1, f"–ù–∞–π–¥–µ–Ω —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫! {user2['gender']}", reply_markup=chat_kb)
                    await bot.send_message(uid2, f"–ù–∞–π–¥–µ–Ω —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫! {user1['gender']}", reply_markup=chat_kb)
                except Exception:
                    # –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å ‚Äì –æ—á–∏—â–∞–µ–º –ø–∞—Ä—ã –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                    users[uid1]["partner"] = None
                    users[uid2]["partner"] = None
                    continue

                # —É–¥–∞–ª—è–µ–º –∏—Ö –∏–∑ –æ—á–µ—Ä–µ–¥–∏ (–µ—Å–ª–∏ –æ–Ω–∏ —Ç–∞–º)
                try:
                    waiting.remove(uid1)
                except ValueError:
                    pass
                try:
                    waiting.remove(uid2)
                except ValueError:
                    pass

                paired = True
                break

        if not paired:
            i += 1

# ====== –ü–µ—Ä–µ–ø–∏—Å–∫–∞ –∏ –æ—Ç–∑—ã–≤—ã ======
@dp.message()
async def chat_handler(message: types.Message):
    uid = message.from_user.id
    if uid not in users:
        return

    partner = users[uid].get("partner")

    # –∫–Ω–æ–ø–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è / –Ω–æ–≤—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä
    if message.text in ["‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", "üîÑ –ù–æ–≤—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫"]:
        # —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–∞—Ä—Ç–Ω—ë—Ä–∞, —Ä–∞–∑—Ä—ã–≤–∞–µ–º –ø–∞—Ä—É —É –æ–±–æ–∏—Ö
        if partner and partner in users:
            users[partner]["partner"] = None
            try:
                await bot.send_message(partner, "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥. –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤:", reply_markup=feedback_kb)
            except Exception:
                pass
            add_to_waiting(partner)

        users[uid]["partner"] = None
        try:
            await bot.send_message(uid, "–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤:", reply_markup=feedback_kb)
        except Exception:
            pass
        add_to_waiting(uid)

        if message.text == "üîÑ –ù–æ–≤—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫":
            await message.answer("–ü–æ–∏—Å–∫ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞‚Ä¶", reply_markup=types.ReplyKeyboardRemove())
            await match_users()
        return

    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ / –∂–∞–ª–æ–±
    if message.text in ["üëç", "üëé", "üö® –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è"]:
        partner_id = partner if partner else None
        try:
            await db.execute(
                feedback_table.insert().values(
                    user_id=uid,
                    partner_id=partner_id,
                    feedback=message.text,
                    timestamp=datetime.utcnow().isoformat()
                )
            )
        except Exception:
            # –ª–æ–≥–∏—Ä—É–µ–º, –Ω–æ –Ω–µ –ø–∞–¥–∞–µ–º
            pass

        # –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏ >=3 –∂–∞–ª–æ–±
        if message.text == "üö® –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è" and partner_id:
            try:
                row = await db.fetch_one(
                    "SELECT COUNT(*) as c FROM feedback WHERE partner_id = :pid AND feedback = 'üö® –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è'",
                    values={"pid": partner_id}
                )
                complaints = int(row["c"]) if row and row.get("c") is not None else 0
            except Exception:
                complaints = 0

            if complaints >= 3:
                try:
                    await db.execute(
                        blocked_table.insert().values(
                            user_id=partner_id,
                            reason="–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∂–∞–ª–æ–±",
                            timestamp=datetime.utcnow().isoformat()
                        )
                    )
                except Exception:
                    pass

                if partner_id in users:
                    try:
                        await bot.send_message(partner_id, "üö´ –í—ã –±—ã–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏–∑-–∑–∞ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∂–∞–ª–æ–±.")
                    except Exception:
                        pass

                try:
                    await bot.send_message(ADMIN_ID, f"‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {partner_id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (–∂–∞–ª–æ–±—ã: {complaints}).")
                except Exception:
                    pass

        try:
            await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!", reply_markup=types.ReplyKeyboardRemove())
        except Exception:
            pass
        return

    # –æ–±—ã—á–Ω–∞—è –ø–µ—Ä–µ—Å—ã–ª–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–∞—Ä—Ç–Ω—ë—Ä—É
    if partner and partner in users:
        try:
            await bot.send_message(partner, message.text)
        except Exception:
            # –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å ‚Äì —É–≤–µ–¥–æ–º–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            try:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É.")
            except Exception:
                pass

# ====== –û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∏ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ ======
async def cleanup():
    try:
        waiting.clear()
        for uid in list(users.keys()):
            users[uid]["partner"] = None
        # –ø–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç –ë–î, –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã
        try:
            await db.disconnect()
        except Exception:
            pass
    except Exception:
        pass

# ====== –ó–∞–ø—É—Å–∫ ======
async def main():
    # –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    await db.connect()
    try:
        await dp.start_polling(bot)
    finally:
        await cleanup()

if __name__ == "__main__":
    asyncio.run(main())
