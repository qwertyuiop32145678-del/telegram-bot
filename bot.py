import asyncio
import sqlite3
import csv
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, FSInputFile
from openpyxl import Workbook

API_TOKEN = "YOUR_BOT_TOKEN"
ADMIN_ID = 123456789  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π Telegram ID

bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# ====== –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ======
conn = sqlite3.connect("bot.db")
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS feedback (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    partner_id INTEGER,
    feedback TEXT,
    timestamp TEXT
)
""")
cursor.execute("""
CREATE TABLE IF NOT EXISTS blocked_users (
    user_id INTEGER PRIMARY KEY,
    reason TEXT,
    timestamp TEXT
)
""")
conn.commit()

# ====== –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ======
users = {}
waiting = []

# ====== FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è ======
class Register(StatesGroup):
    gender = State()
    age = State()
    looking_gender = State()
    looking_age = State()

# ====== –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ======
feedback_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üëç"), KeyboardButton(text="üëé")],
              [KeyboardButton(text="üö® –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è")]],
    resize_keyboard=True
)

chat_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥")],
              [KeyboardButton(text="üîÑ –ù–æ–≤—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫")]],
    resize_keyboard=True
)

# ====== –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ ======
def is_blocked(user_id: int) -> bool:
    cursor.execute("SELECT 1 FROM blocked_users WHERE user_id=?", (user_id,))
    return cursor.fetchone() is not None

# ====== –ö–æ–º–∞–Ω–¥—ã ======
@dp.message(CommandStart())
async def start_cmd(message: types.Message, state: FSMContext):
    if is_blocked(message.from_user.id):
        await message.answer("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")
        return

    await message.answer("–ü—Ä–∏–≤–µ—Ç! –£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª:",
                         reply_markup=ReplyKeyboardMarkup(
                             keyboard=[[KeyboardButton(text="–ú—É–∂—Å–∫–æ–π")], [KeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π")]],
                             resize_keyboard=True
                         ))
    await state.set_state(Register.gender)

# –ê–¥–º–∏–Ω: –ø—Ä–æ—Å–º–æ—Ç—Ä –∂–∞–ª–æ–± –∏ –æ—Ç–∑—ã–≤–æ–≤
@dp.message(Command("reports"))
async def reports_cmd(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.text.split()
    filter_type = args[1] if len(args) > 1 else None

    query = "SELECT user_id, partner_id, feedback, timestamp FROM feedback"
    params = []

    if filter_type in ["üëç", "üëé", "üö®"]:
        query += " WHERE feedback = ?"
        params.append(filter_type)

    query += " ORDER BY id DESC LIMIT 20"

    cursor.execute(query, params)
    rows = cursor.fetchall()

    if not rows:
        await message.answer("–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –ø–æ –¥–∞–Ω–Ω–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É.")
        return

    report_text = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –æ—Ç–∑—ã–≤–æ–≤" + (f" ({filter_type})" if filter_type else "") + ":\n\n"
    for user_id, partner_id, fb, ts in rows:
        report_text += f"üë§ {user_id} ‚Üí {partner_id if partner_id else '-'} | {fb} | {ts}\n"

    await message.answer(report_text)

# –ê–¥–º–∏–Ω: —ç–∫—Å–ø–æ—Ä—Ç –æ—Ç–∑—ã–≤–æ–≤ –≤ CSV
@dp.message(Command("export"))
async def export_cmd(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    cursor.execute("SELECT * FROM feedback")
    rows = cursor.fetchall()

    if not rows:
        await message.answer("–í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤.")
        return

    filename = "feedback_export.csv"
    with open(filename, "w", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow(["id", "user_id", "partner_id", "feedback", "timestamp"])
        writer.writerows(rows)

    file = FSInputFile(filename)
    await message.answer_document(file)

# –ê–¥–º–∏–Ω: —ç–∫—Å–ø–æ—Ä—Ç –æ—Ç–∑—ã–≤–æ–≤ –≤ Excel
@dp.message(Command("export_xlsx"))
async def export_xlsx_cmd(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    cursor.execute("SELECT * FROM feedback")
    rows = cursor.fetchall()

    if not rows:
        await message.answer("–í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤.")
        return

    wb = Workbook()
    ws = wb.active
    ws.append(["id", "user_id", "partner_id", "feedback", "timestamp"])
    for row in rows:
        ws.append(row)

    filename = "feedback_export.xlsx"
    wb.save(filename)

    file = FSInputFile(filename)
    await message.answer_document(file)

# –ê–¥–º–∏–Ω: —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(Command("unblock"))
async def unblock_cmd(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.text.split()
    if len(args) != 2 or not args[1].isdigit():
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unblock user_id")
        return

    uid = int(args[1])
    cursor.execute("DELETE FROM blocked_users WHERE user_id=?", (uid,))
    conn.commit()
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

@dp.message(Register.gender)
async def process_gender(message: types.Message, state: FSMContext):
    await state.update_data(gender=message.text)
    await message.answer("–£–∫–∞–∂–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ–º):", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(Register.age)

@dp.message(Register.age)
async def process_age(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º!")
        return
    await state.update_data(age=int(message.text))
    await message.answer("–ö–æ–≥–æ –∏—â–µ–º? –£–∫–∞–∂–∏ –ø–æ–ª:",
                         reply_markup=ReplyKeyboardMarkup(
                             keyboard=[[KeyboardButton(text="–ú—É–∂—Å–∫–æ–π")], [KeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π")]],
                             resize_keyboard=True
                         ))
    await state.set_state(Register.looking_gender)

@dp.message(Register.looking_gender)
async def process_looking_gender(message: types.Message, state: FSMContext):
    await state.update_data(looking_gender=message.text)
    await message.answer("–£–∫–∞–∂–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:")
    await state.set_state(Register.looking_age)

@dp.message(Register.looking_age)
async def process_looking_age(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º!")
        return

    if is_blocked(message.from_user.id):
        await message.answer("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤.")
        return

    data = await state.get_data()
    user_id = message.from_user.id

    users[user_id] = {
        "gender": data["gender"],
        "age": data["age"],
        "looking_for": {
            "gender": data["looking_gender"],
            "min_age": int(message.text)
        },
        "partner": None
    }

    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Ç—ã –≤ –ø–æ–∏—Å–∫–µ. –ñ–¥–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞‚Ä¶")
    waiting.append(user_id)

    await match_users()
    await state.clear()

# ====== –õ–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ ======
async def match_users():
    if len(waiting) < 2:
        return

    for i, uid1 in enumerate(waiting):
        user1 = users[uid1]
        for uid2 in waiting[i+1:]:
            user2 = users[uid2]

            if (user1["looking_for"]["gender"] == user2["gender"] and
                user2["looking_for"]["gender"] == user1["gender"] and
                user1["age"] >= user2["looking_for"]["min_age"] and
                user2["age"] >= user1["looking_for"]["min_age"]):

                users[uid1]["partner"] = uid2
                users[uid2]["partner"] = uid1

                await bot.send_message(uid1, f"–ù–∞–π–¥–µ–Ω —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫! {user2['gender']}, {user2['age']} –ª–µ—Ç.", reply_markup=chat_kb)
                await bot.send_message(uid2, f"–ù–∞–π–¥–µ–Ω —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫! {user1['gender']}, {user1['age']} –ª–µ—Ç.", reply_markup=chat_kb)

                waiting.remove(uid1)
                waiting.remove(uid2)
                return

# ====== –ü–µ—Ä–µ–ø–∏—Å–∫–∞ –∏ –æ—Ç–∑—ã–≤—ã ======
@dp.message()
async def chat_handler(message: types.Message):
    uid = message.from_user.id
    if uid not in users:
        return

    partner = users[uid].get("partner")

    if message.text in ["‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", "üîÑ –ù–æ–≤—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫"]:
        if partner:
            await bot.send_message(partner, "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥. –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤:", reply_markup=feedback_kb)
            users[partner]["partner"] = None
        await message.answer("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤:", reply_markup=feedback_kb)
        users[uid]["partner"] = None

        if message.text == "üîÑ –ù–æ–≤—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫":
            if not is_blocked(uid):
                waiting.append(uid)
                await message.answer("–ü–æ–∏—Å–∫ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞‚Ä¶", reply_markup=types.ReplyKeyboardRemove())
                await match_users()
        return

    if message.text in ["üëç", "üëé", "üö® –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è"]:
        partner_id = partner if partner else None
        cursor.execute("INSERT INTO feedback (user_id, partner_id, feedback, timestamp) VALUES (?, ?, ?, ?)",
                       (uid, partner_id, message.text, datetime.utcnow().isoformat()))
        conn.commit()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∂–∞–ª–æ–±—ã
        if message.text == "üö® –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è" and partner_id:
            cursor.execute("SELECT COUNT(*) FROM feedback WHERE partner_id=? AND feedback='üö® –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è'", (partner_id,))
            complaints = cursor.fetchone()[0]
            if complaints >= 3:
                cursor.execute("INSERT OR REPLACE INTO blocked_users (user_id, reason, timestamp) VALUES (?, ?, ?)",
                               (partner_id, "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∂–∞–ª–æ–±", datetime.utcnow().isoformat()))
                conn.commit()
                await bot.send_message(partner_id, "üö´ –í—ã –±—ã–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏–∑-–∑–∞ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∂–∞–ª–æ–±.")
                await bot.send_message(ADMIN_ID, f"‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {partner_id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (–∂–∞–ª–æ–±—ã: {complaints}).")

        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!", reply_markup=types.ReplyKeyboardRemove())
        return

    if partner:
        await bot.send_message(partner, message.text)

# ====== –ó–∞–ø—É—Å–∫ ======
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
