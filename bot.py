import asyncio
import os
from datetime import datetime
from collections import deque
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, FSInputFile
from databases import Database
from sqlalchemy import Table, Column, Integer, String, MetaData, create_engine

# ====== –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ======
API_TOKEN = os.environ.get("API_TOKEN")
ADMIN_ID = int(os.environ.get("ADMIN_ID"))
CHANNEL_USERNAME = "anon_ru_chatik"
DATABASE_URL = os.environ.get("DATABASE_URL")

if not API_TOKEN or not ADMIN_ID or not DATABASE_URL:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è API_TOKEN, ADMIN_ID –∏–ª–∏ DATABASE_URL")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# ====== PostgreSQL ======
metadata = MetaData()

feedback_table = Table(
    "feedback", metadata,
    Column("id", Integer, primary_key=True),
    Column("user_id", Integer),
    Column("partner_id", Integer),
    Column("feedback", String),
    Column("timestamp", String)
)

blocked_table = Table(
    "blocked_users", metadata,
    Column("user_id", Integer, primary_key=True),
    Column("reason", String),
    Column("timestamp", String)
)

engine = create_engine(DATABASE_URL)
metadata.create_all(engine)
db = Database(DATABASE_URL)

# ====== –û—á–µ—Ä–µ–¥—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ======
users = {}  # user_id -> –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
waiting = deque()

# ====== FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è ======
class Register(StatesGroup):
    check_subscribe = State()
    gender = State()
    age_confirm = State()
    mode = State()

# ====== –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ======
gender_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ú—É–∂—Å–∫–æ–π")],[KeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π")]],
    resize_keyboard=True
)
age_confirm_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="18+"), KeyboardButton(text="–ù–µ—Ç")]],
    resize_keyboard=True
)
mode_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–†–æ–ª–µ–≤–∏–∫"), KeyboardButton(text="–í–∏—Ä—Ç")],
        [KeyboardButton(text="–û–±—â–µ–Ω–∏–µ")],
        [KeyboardButton(text="–í—ã–±–æ—Ä –¥—Ä—É–≥–æ–≥–æ —Ä–µ–∂–∏–º–∞")]
    ],
    resize_keyboard=True
)
feedback_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üëç"), KeyboardButton(text="üëé")],
        [KeyboardButton(text="üö® –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è")]
    ],
    resize_keyboard=True
)
chat_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥")],
        [KeyboardButton(text="üîÑ –ù–æ–≤—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫")]
    ],
    resize_keyboard=True
)

# ====== –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ======
async def is_subscribed(user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(f"@{CHANNEL_USERNAME}", user_id)
        return member.is_member
    except:
        return False

# ====== –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ ======
async def is_blocked(user_id: int) -> bool:
    row = await db.fetch_one(blocked_table.select().where(blocked_table.c.user_id == user_id))
    return row is not None

# ====== –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å ======
def add_to_waiting(user_id):
    if user_id not in waiting and not users[user_id].get("partner"):
        waiting.append(user_id)

# ====== –ö–æ–º–∞–Ω–¥–∞ /start ======
@dp.message(CommandStart())
async def start_cmd(message: types.Message, state: FSMContext):
    await db.connect()
    if await is_blocked(message.from_user.id):
        await message.answer("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")
        return

    if not await is_subscribed(message.from_user.id):
        await message.answer(f"üîî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @{CHANNEL_USERNAME} —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")
        return

    await message.answer("–ü—Ä–∏–≤–µ—Ç! –£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª:", reply_markup=gender_kb)
    await state.set_state(Register.gender)

# ====== FSM –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ======
@dp.message(Register.gender)
async def process_gender(message: types.Message, state: FSMContext):
    await state.update_data(gender=message.text)
    await message.answer("–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –≤–∞–º –µ—Å—Ç—å 18 –ª–µ—Ç?", reply_markup=age_confirm_kb)
    await state.set_state(Register.age_confirm)

@dp.message(Register.age_confirm)
async def process_age_confirm(message: types.Message, state: FSMContext):
    if message.text != "18+":
        await message.answer("–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç–∞—Ä—à–µ 18 –ª–µ—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.")
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è:", reply_markup=mode_kb)
    await state.set_state(Register.mode)

@dp.message(Register.mode)
async def process_mode(message: types.Message, state: FSMContext):
    data = await state.get_data()
    uid = message.from_user.id
    users[uid] = {
        "gender": data["gender"],
        "mode": message.text,
        "partner": None
    }
    add_to_waiting(uid)
    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–∂–∏–º: {message.text}. –ñ–¥–∏—Ç–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞‚Ä¶", reply_markup=types.ReplyKeyboardRemove())
    await match_users()
    await state.clear()

# ====== –õ–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ ======
async def match_users():
    i = 0
    while i < len(waiting):
        uid1 = waiting[i]
        user1 = users[uid1]
        if user1.get("partner"):
            i += 1
            continue

        paired = False
        for j in range(i + 1, len(waiting)):
            uid2 = waiting[j]
            user2 = users[uid2]
            if user2.get("partner"):
                continue

            if user1["mode"] == user2["mode"]:
                users[uid1]["partner"] = uid2
                users[uid2]["partner"] = uid1

                try:
                    await bot.send_message(uid1, f"–ù–∞–π–¥–µ–Ω —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫! {user2['gender']}", reply_markup=chat_kb)
                    await bot.send_message(uid2, f"–ù–∞–π–¥–µ–Ω —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫! {user1['gender']}", reply_markup=chat_kb)
                except:
                    pass

                waiting.remove(uid1)
                waiting.remove(uid2)
                paired = True
                break

        if not paired:
            i += 1

# ====== –ü–µ—Ä–µ–ø–∏—Å–∫–∞ –∏ –æ—Ç–∑—ã–≤—ã ======
@dp.message()
async def chat_handler(message: types.Message):
    uid = message.from_user.id
    if uid not in users:
        return

    partner = users[uid].get("partner")

    if message.text in ["‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", "üîÑ –ù–æ–≤—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫"]:
        if partner and partner in users:
            users[partner]["partner"] = None
            await bot.send_message(partner, "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥. –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤:", reply_markup=feedback_kb)
            add_to_waiting(partner)

        users[uid]["partner"] = None
        await bot.send_message(uid, "–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤:", reply_markup=feedback_kb)
        add_to_waiting(uid)

        if message.text == "üîÑ –ù–æ–≤—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫":
            await message.answer("–ü–æ–∏—Å–∫ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞‚Ä¶", reply_markup=types.ReplyKeyboardRemove())
            await match_users()
        return

    if message.text in ["üëç", "üëé", "üö® –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è"]:
        partner_id = partner if partner else None
        await db.execute(feedback_table.insert().values(
            user_id=uid,
            partner_id=partner_id,
            feedback=message.text,
            timestamp=datetime.utcnow().isoformat()
        ))

        if message.text == "üö® –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è" and partner_id:
            row = await db.fetch_one(f"SELECT COUNT(*) as c FROM feedback WHERE partner_id={partner_id} AND feedback='üö® –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è'")
            complaints = row['c'] if row else 0
            if complaints >= 3:
                await db.execute(blocked_table.insert().values(
                    user_id=partner_id,
                    reason="–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∂–∞–ª–æ–±",
                    timestamp=datetime.utcnow().isoformat()
                ))
                if partner_id in users:
                    await bot.send_message(partner_id, "üö´ –í—ã –±—ã–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏–∑-–∑–∞ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∂–∞–ª–æ–±.")
                await bot.send_message(ADMIN_ID, f"‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {partner_id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (–∂–∞–ª–æ–±—ã: {complaints}).")

        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!", reply_markup=types.ReplyKeyboardRemove())
        return

    if partner and partner in users:
        try:
            await bot.send_message(partner, message.text)
        except:
            pass

# ====== –ó–∞–ø—É—Å–∫ ======
async def main():
    await db.connect()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
